--Change in the MM: Metaclass removed 

module EliminateMetaclassTar; -- Module Template
create OUT : ATL refining IN : ATL, diff : DIFF;

helper def : DiffSize : Integer = 6;	

helper def : getRemoveModelElements : Sequence(String) =
	--Sequence{'OpenView', 'MultipleChoiceView'};
	DIFF!RemoveModelElement.allInstances()->select(e|not e.oclIsUndefined())->asSequence()->collect(e|e.leftElement.toString().substring(self.DiffSize,e.leftElement.toString().size()));	

helper def : delete (param : Sequence(ATL!SimpleOutPatternElement)) : Sequence(ATL!SimpleOutPatternElement) =
	
	let elements : Sequence(String) = self.getRemoveModelElements
	in elements->iterate(p; y : Sequence(ATL!Binding) = param |
		if self.contains(p, param) then
			self.delete(y->excluding(param->at(self.index(p, param))))
		else
			y
		endif
	)
	;
helper def : contains (param1 : String, param2 : Sequence(ATL!SimpleOutPatternElement)) : Boolean =
	param2->iterate(p; y : Boolean = false |
		if p.type.name = param1 then
			true
		else
			if y = true then
				true
			else
				false
			endif
		endif
	)
	;
helper def : index (param1 : String, param2 : Sequence(ATL!SimpleOutPatternElement)) : Integer =
	param2->iterate(p; y : Integer = 0 |
		if p.type.name = param1 then
			param2->indexOf(p)
		else
			y
		endif
	)
	;

	

helper def : deleteBinding (param : Sequence(ATL!Binding)) : Sequence(ATL!Binding) =
	let elements : Sequence(String) = self.getRemoveModelElements
	in elements->iterate(p; y : Sequence(ATL!Binding) = param |
		if self.containsBinding(p, param) then
		 	self.deleteBinding(y->excluding(param->at(self.indexBinding(p, param))))
		else
			y
		endif
	)
	;
helper def : containsBinding (param1 : String, param2 : Sequence(ATL!Binding)) : Boolean =
	param2->iterate(p; y : Boolean = false |
		if p.value.referredVariable.type.name = param1 then
			true
		else
			if y = true then
				true
			else
				false
			endif
		endif
	)
	;
helper def : indexBinding (param1 : String, param2 : Sequence(ATL!Binding)) : Integer =
	param2->iterate(p; y : Integer = 0 |
		if p.value.referredVariable.type.name = param1 then
			param2->indexOf(p)
		else
			y
		endif
	)
	;
	
rule Module {
	from
		s : ATL!Module
	to
		t : ATL!Module (
			name <- s.name,
			libraries <- s.libraries,
			isRefining <- s.isRefining,
			inModels <- s.inModels,
			outModels <- s.outModels,
			elements <- s.elements
		)
}

rule OutPattern {
	from
		s : ATL!OutPattern
	to
		t : ATL!OutPattern (
			
			elements <- self.delete(s.elements)
		)
		do {
		self.getRemoveModelElements->first().println();
	}
		
}

rule SimpleOutPatternElement {
	from
		s : ATL!SimpleOutPatternElement
	to
		t : ATL!SimpleOutPatternElement(
			type <- s.type,
			varName <- s.varName,
			
			bindings <- self.deleteBinding(s.bindings->select(e|e.value.oclIsKindOf(ATL!VariableExp)))->union(s.bindings->select(e|not e.value.oclIsKindOf(ATL!VariableExp)))
		)
	
}

