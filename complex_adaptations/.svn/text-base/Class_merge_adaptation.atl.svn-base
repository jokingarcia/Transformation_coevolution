
module Class_merge_adaptation; -- Module Template
create OUT : ATL refining IN : ATL, diff : DIFF;

helper def : MMSize : Integer = 11;
helper def : EcoreSize : Integer = 7;
helper def : DiffSize : Integer = 6;
helper def : diffSize : Integer = 6;
helper def : resultXXSize : Integer = 10;
helper def : resultSize : Integer = 8;
helper def : sourceMM : String = 'ExamXML';
helper def : targetMM : String = 'AssistantMVC';
helper def : index : Integer = 1;
helper def : indexBinding : Integer = 1;
helper def : indexVariable : Integer = 1;
helper def : variableDeclarations : Sequence(ATL!VariableDeclaration) = Sequence{};


helper def : getUpdateAttributeRight : Sequence(String) =
	DIFF!ComplexChange.allInstances()->select(e|not e.oclIsUndefined())->asSequence()
	->select(e|e.changeType=#Class_merge)
	->collect(e|e.atomicChanges)->first()->select(e|e.oclIsTypeOf(DIFF!UpdateAttribute))
	->collect(e|e.rightElement.toString().split('!')->last());
helper def : getUpdateAttributeLeft : Sequence(String) =
	DIFF!ComplexChange.allInstances()->select(e|not e.oclIsUndefined())->asSequence()
	->select(e|e.changeType=#Class_merge)
	->collect(e|e.atomicChanges)->first()->select(e|e.oclIsTypeOf(DIFF!UpdateAttribute))
	->collect(e|e.leftElement.toString().split('!')->last());
helper def : getRemoveModelElement : Sequence(String) =
	DIFF!ComplexChange.allInstances()->select(e|not e.oclIsUndefined())->asSequence()
	->select(e|e.changeType=#Class_merge)
	->collect(e|e.atomicChanges)->first()->select(e|e.oclIsTypeOf(DIFF!RemoveModelElement))
	->collect(e|e.leftElement.toString().split('!')->last());

helper def : getMergedClasses : Sequence(String) =
	self.getUpdateAttributeLeft.union(self.getRemoveModelElement);

--returns if param1 is in param2
helper def : containsString (param1 : String, param2 : Sequence(String)) : Boolean =
	param2->iterate(p; y : Boolean = false |
		if p = param1 then
			true
		else
			if y = true then
				true
			else
				false
			endif
		endif
	)
	;

helper def : deletedRule : Sequence(ATL!MatchedRule) =
	ATL!MatchedRule.allInstances()->
	select(e|self.containsString(e.inPattern.elements->first().type.name, self.getMergedClasses));

----------------------DELETE CLASS-------------------------------------
helper def : deleteRule (param : Sequence(ATL!MatchedRule)) : Sequence(ATL!MatchedRule) =
	let elements : Sequence(String) = self.getMergedClasses
	in elements->iterate(p; y : Sequence(ATL!MatchedRule) = param |
		if self.contains(p, param) then
			self.deleteRule(y->excluding(param->at(self.index(p, param))))
		else
			y
		endif
	)
	;

---------------ELIMINATE METAPROPERTY---------------------

helper def : delete (param : Sequence(ATL!Binding)) : Sequence(ATL!Binding) =
	--elements = Sequence{'OEAttribute'}
	let elements : Sequence(String) = self.getRemoveModelElements
	in elements->iterate(p; y : Sequence(ATL!Binding) = param |
		if self.contains(p, param) then
		 	y->excluding(param->at(self.index(p, param)))
		else
			y
		endif
	);
helper def : contains (param1 : String, param2 : Sequence(ATL!MatchedRule)) : Boolean =
	param2->iterate(p; y : Boolean = false |
		if p.inPattern.elements->first().type.name = param1 then
			true
		else
			if y = true then
				true
			else
				false
			endif
		endif
	);
helper def : index (param1 : String, param2 : Sequence(ATL!MatchedRule)) : Integer =
	param2->iterate(p; y : Integer = 0 |
		if p.inPattern.elements->first().type.name = param1 then
			param2->indexOf(p)
		else
			y
		endif
	);
helper def : filtermatch (param : String) : Boolean =
	let elements : Sequence(String) = self.getRemoveModelElements
	in elements->iterate(p; y : Boolean = false |
		if p = param
		then
			true
		else
			if y = true
			then
				true
			else
				false
			endif
		endif
	);
--==============================RULES===========================================
	
rule Module {
	from
		s : ATL!Module
	to
		t : ATL!Module (
			name <- s.name,
			libraries <- s.libraries,
			isRefining <- s.isRefining,
			inModels <- s.inModels,
			outModels <- s.outModels,
			--elements <- s.elements
			elements <- self.deleteRule(s.elements)
		)
		do{
			t.elements <- t.elements->append(thisModule.MatchedRule2MatchedRule(t.elements));
			
		}
}
-----------------ADD METACLASS---------------------------------------
lazy rule MatchedRule2MatchedRule {
	from
		s : ATL!MatchedRule
	
	to
		mr : ATL!MatchedRule (
			name <- thisModule.getUpdateAttributeRight->first(),
			isAbstract <- false,
			isRefining <- false,
			inPattern <- ip_i_c2,
			outPattern <- op_i_c2,
			commentsBefore <- Set {'--MERGED RULE'}
		),
		ip_i_c2 : ATL!InPattern (
			elements <- Sequence{ipe_i_c2}
		),
		ipe_i_c2 : ATL!SimpleInPatternElement (
			varName <- self.deletedRule->first().inPattern.elements->first().varName,
			type <- ipet_i_c2
		),
		ipet_i_c2 : ATL!OclModelElement (
			name <- thisModule.getUpdateAttributeRight->first(),
			model <- om
		),
		om : ATL!OclModel (
			name <- self.sourceMM
		),
		op_i_c2 : ATL!OutPattern (
			--union of two rules
			elements <- self.deletedRule->first().outPattern.elements
			--elements <- self.deletedRule->first().outPattern.elements.union(self.deletedRule->last().outPattern.elements)
		)

		do{
			for (iterator in self.deletedRule->last().outPattern.elements){
				op_i_c2.elements <- op_i_c2.elements->append(thisModule.SOPE2SOPE(op_i_c2.elements));
				self.index <- self.index + 1;
				
			}
			
		}
	
}
lazy rule SOPE2SOPE {
	from
		s : ATL!SimpleOutPatternElement
	
	to
		ope_i_c2 : ATL!SimpleOutPatternElement(
			varName <- self.deletedRule->last().outPattern.elements.at(self.index).varName.concat('_2'),
			type <- opet_i_c2
						
			
		),
		opet_i_c2 : ATL!OclModelElement (
			name <- self.deletedRule->last().outPattern.elements.at(self.index).type.name,
			model <- om2
		),
		om2 : ATL!OclModel (
			name <- self.targetMM	
		)

		do{
			self.variableDeclarations <- self.variableDeclarations->append(ope_i_c2);
			self.indexBinding <- 1;
			for (iterator in self.deletedRule->last().outPattern.elements.at(self.index).bindings){
				if (self.deletedRule->last().outPattern.elements.at(self.index).bindings.at(self.indexBinding).value.oclIsTypeOf(ATL!VariableExp)){
					'B2B'.println();
					ope_i_c2.bindings <- ope_i_c2.bindings->append(self.B2B(ope_i_c2.bindings));
				}else{
					if (self.deletedRule->last().outPattern.elements.at(self.index).bindings.at(self.indexBinding).value.oclIsTypeOf(ATL!StringExp)){
						'B2BString'.println();
						ope_i_c2.bindings <- ope_i_c2.bindings->append(self.B2BString(ope_i_c2.bindings));
					}else{
						'B2BNavigation'.println();
						ope_i_c2.bindings <- ope_i_c2.bindings->append(self.B2BNavigation(ope_i_c2.bindings));
					}
				}
				self.indexBinding <- self.indexBinding + 1;
			}
		}
}
--Binding when binding.value is NavigationOrAttributeCallExp
lazy rule B2BNavigation {
	from
		s : ATL!Binding
	
	to
		b : ATL!Binding ( 
			propertyName <- self.deletedRule->last().outPattern.elements.at(self.index).bindings.at(self.indexBinding).propertyName,
			value <- arg
			--commentsBefore <- Set {'--comment'}
		),
		arg : ATL!NavigationOrAttributeCallExp (
			name <- self.deletedRule->last().outPattern.elements.at(self.index).bindings.at(self.indexBinding).value.name,
			source <- ve
		),
		ve : ATL!VariableExp (
			referredVariable <- self.deletedRule->last().outPattern.elements.at(self.index).bindings.at(self.indexBinding).value.source.referredVariable	
		)
}
--Binding when binding.value is VariableExp
lazy rule B2B {
	from
		s : ATL!Binding
	
	to
		b : ATL!Binding ( 
			propertyName <- self.deletedRule->last().outPattern.elements.at(self.index).bindings.at(self.indexBinding).propertyName,
			value <- ve
			--commentsBefore <- Set {'--comment'}
		),
		ve : ATL!VariableExp (
			
		)
		do{
			self.indexVariable <- 1;
			for (iterator in self.variableDeclarations){
				if (self.deletedRule->last().outPattern.elements.at(self.index).bindings.at(self.indexBinding).value.referredVariable.varName.concat('_2')
						= self.variableDeclarations.at(self.indexVariable).varName){
					ve.referredVariable <- self.variableDeclarations.at(self.indexVariable);
				}
				self.indexVariable <- self.indexVariable + 1;
			}
		}
}
--Binding when binding.value is StringExp
lazy rule B2BString {
	from
		s : ATL!Binding
	
	to
		b : ATL!Binding ( 
			propertyName <- self.deletedRule->last().outPattern.elements.at(self.index).bindings.at(self.indexBinding).propertyName,
			value <- se
			--commentsBefore <- Set {'--comment'}
		),
		se : ATL!StringExp (
			stringSymbol <- self.deletedRule->last().outPattern.elements.at(self.index).bindings.at(self.indexBinding).value.stringSymbol	
		)
		do{
			
		}
}
----------------------ADD METAPROPERTY------------------------------------------

rule SimpleOutPatternElement1 {
	from
		s : ATL!SimpleOutPatternElement

	to
		t : ATL!SimpleOutPatternElement(
			type <- s.type,
			varName <- s.varName,
			bindings <- s.bindings
			
		)
	do {
			
			
			self.getUpdateAttributeRight->toString().println();
			self.getUpdateAttributeLeft->toString().println();
			self.getRemoveModelElement->toString().println();
			self.deletedRule->first().outPattern.elements->last().bindings->toString().println();
			self.deletedRule->last().outPattern.elements->first().type->toString().println();
						
				
		}
}

