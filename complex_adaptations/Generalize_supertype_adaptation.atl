
module Generalize_supertype_adaptation; -- Module Template
create OUT : ATL refining IN : ATL, diff : DIFF, Assistant : Ecore;

helper def : MMSize : Integer = 11;
helper def : EcoreSize : Integer = 7;
helper def : diffSize : Integer = 6;
helper def : resultXXSize : Integer = 10;
helper def : resultSize : Integer = 8;
helper def : sourceMM : String = 'ExamXML';
helper def : targetMM : String = 'AssistantMVC';

helper def : getRemoveReferenceValueRight : Sequence(DIFF!ComplexChange) =
	DIFF!ComplexChange.allInstances()->select(e|not e.oclIsUndefined())->asSequence()
	->select(e|e.changeType=#Generalize_supertype)
	->collect(e|e.atomicChanges)->first()->select(e|e.oclIsTypeOf(DIFF!RemoveReferenceValue))
	->collect(e|e.rightElement.toString().split('!')->last())->first();
helper def : getRemoveReferenceValueLeft : String =
	DIFF!ComplexChange.allInstances()->select(e|not e.oclIsUndefined())->asSequence()
	->select(e|e.changeType=#Generalize_supertype)
	->collect(e|e.atomicChanges)->first()->select(e|e.oclIsTypeOf(DIFF!RemoveReferenceValue))
	->collect(e|e.leftRemovedTarget.toString().split('!')->last())->first();
helper def : getAddReferenceValueRightElement : String =
	DIFF!ComplexChange.allInstances()->select(e|not e.oclIsUndefined())->asSequence()
	->select(e|e.changeType=#Generalize_supertype)
	->collect(e|e.atomicChanges)->first()->select(e|e.oclIsTypeOf(DIFF!AddReferenceValue))
	->collect(e|e.rightElement.toString().split('!')->last())->first();
helper def : getAddReferenceValueRightAddedTarget : String =
	DIFF!ComplexChange.allInstances()->select(e|not e.oclIsUndefined())->asSequence()
	->select(e|e.changeType=#Generalize_supertype)
	->collect(e|e.atomicChanges)->first()->select(e|e.oclIsTypeOf(DIFF!AddReferenceValue))
	->collect(e|e.rightAddedTarget.toString().split('!')->last())->first();

---------------ELIMINATE METAPROPERTY---------------------
--returns attributes that are in the "middle" class (ExamItem)
--Sequence{'question'};
helper def : getRemoveModelElements : Sequence(String) =
	self.getAttributesFromClass(self.getRemoveReferenceValueLeft);

helper def : getAttributesFromClass (param : String) : Sequence(String) =
	Ecore!EClassifier.allInstances()->select(e|e.name=param)
	->collect(e|e.eAllAttributes)->first()->collect(e|e.toString().split('!')->last());

helper def : delete (param : Sequence(ATL!Binding)) : Sequence(ATL!Binding) =
	--elements = Sequence{'question'}
	let elements : Sequence(String) = self.getRemoveModelElements
	in elements->iterate(p; y : Sequence(ATL!Binding) = param |
		if self.contains(p, param) then
		 	y->excluding(param->at(self.index(p, param)))
		else
			y
		endif
	)
	;
helper def : contains (param1 : String, param2 : Sequence(ATL!Binding)) : Boolean =
	param2->iterate(p; y : Boolean = false |
		if p.propertyName = param1 then
			true
		else
			if y = true then
				true
			else
				false
			endif
		endif
	)
	;
helper def : index (param1 : String, param2 : Sequence(ATL!Binding)) : Integer =
	param2->iterate(p; y : Integer = 0 |
		if p.propertyName = param1 then
			param2->indexOf(p)
		else
			y
		endif
	)
	;
helper def : filtermatch (param : String) : Boolean =
	let elements : Sequence(String) = self.getRemoveModelElements
	in elements->iterate(p; y : Boolean = false |
		if p = param
		then
			true
		else
			if y = true
			then
				true
			else
				false
			endif
		endif
	);
--==============================RULES===========================================
	
rule Module {
	from
		s : ATL!Module
	to
		t : ATL!Module (
			name <- s.name,
			libraries <- s.libraries,
			isRefining <- s.isRefining,
			inModels <- s.inModels,
			outModels <- s.outModels,
			elements <- s.elements
		)
		do{
			
		}
}

----------------------REMOVE METAPROPERTY------------------------------------------

rule SimpleOutPatternElement {
	from
		s : ATL!SimpleOutPatternElement

	to
		t : ATL!SimpleOutPatternElement(
			type <- s.type,
			varName <- s.varName,
			--bindings <- s.bindings
			bindings <- self.delete(s.bindings)
		)
	do {
			
			self.getRemoveReferenceValueRight->toString().println();
			self.getRemoveReferenceValueLeft->toString().println();
			self.getAddReferenceValueRightElement->toString().println();
			self.getAddReferenceValueRightAddedTarget->toString().println();
			self.getRemoveModelElements->toString().println();
				
		}
}
